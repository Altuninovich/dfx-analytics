{"version":3,"sources":["Components/Analysis.jsx","Components/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["numberSeconds","Analysis","props","roundNum","n","Math","floor","getDiffPercent","sumCurrent","sumPrevious","dif","updateExchangerData","a","fetch","method","response","json","result","exchangerHash","startPoint","length","timeStamp","transactionsPerDay","filter","tokenSymbol","returnDfx","to","acceptedDfx","from","quantityReturnDfx","reduce","acc","el","value","quantityAcceptedDfx","totalSumDfx","startPointForThePreviousDay","totalSumDfxForThePreviousDay","setState","inputDfxPancakeSwap","outputDfxPancakeSwap","percentInputDfxPancakeSwap","percentOutputDfxPancakeSwap","totalSumPancake","diffBetweenCurrentAndPreviousDayPancakeSwap","updateDataFarmingPool","farmingPoolHash","inputPool","outputPool","totalSumAddPool","totalSumFromPool","totalSum","totalSumDfxForThePreviousDayFarmingPool","inputDfxFarmingPool","outputDfxFarmingPool","percentInputDfxFarmingPool","percentOutputDfxFarmingPool","totalSumFarming","diffBetweenCurrentAndPreviousDayFarmingPool","updateDataDfxStaking","dfxStakingHash","inputStaking","outputStaking","totalSumAddStaking","totalSumFromStaking","totalSumDfxForThePreviousDayStaking","inputDfxStaking","outputDfxStaking","percentInputDfxStaking","percentOutputDfxStaking","totalSumStaking","diffBetweenCurrentAndPreviousDayStaking","getDataAnalysis","startAnalysis","timerId","setInterval","state","this","clearInterval","getPercent","val","percentPancake","percentFarming","percentStaking","Alert","variant","Badge","ProgressBar","now","label","striped","React","Component","Header","Jumbotron","fluid","Container","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be402443.chunk.js","sourcesContent":["import React from 'react';\r\nimport {ProgressBar, Container, Badge, Alert} from 'react-bootstrap';\r\n\r\nconst numberSeconds = 86400 //количество секунд в сутках, для фильтрации данных за сутки\r\n\r\nexport class Analysis extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            inputDfxPancakeSwap: null, \r\n            outputDfxPancakeSwap: null, \r\n            percentInputDfxPancakeSwap: 0, \r\n            percentOutputDfxPancakeSwap: 0,\r\n            inputDfxFarmingPool: null, \r\n            outputDfxFarmingPool: null, \r\n            percentInputDfxFarmingPool: 0, \r\n            percentOutputDfxFarmingPool: 0,\r\n            percentInputDfxStaking: null, \r\n            percentOutputDfxStaking: null,\r\n            inputDfxStaking: 0,\r\n            outputDfxStaking: 0,\r\n            totalSumPancake: 0,\r\n            totalSumFarming: 0,\r\n            totalSumStaking: 0,\r\n            diffBetweenCurrentAndPreviousDayPancakeSwap: '',\r\n            diffBetweenCurrentAndPreviousDayFarmingPool: '',\r\n            diffBetweenCurrentAndPreviousDayStaking: ''\r\n\r\n        }\r\n    }\r\n\r\n    roundNum = (n) => Math.floor(n * 100) / 100\r\n\r\n    getDiffPercent = (sumCurrent, sumPrevious) => {\r\n        const dif = sumCurrent - sumPrevious\r\n              if ( dif < 0) {\r\n                  return `${Math.floor(100 * dif / sumPrevious)}%`\r\n              }\r\n              return `+${Math.floor(100 * dif / sumCurrent)}%`\r\n          }\r\n\r\n    updateExchangerData = async () => {\r\n        const url = 'https://api.bscscan.com/api?module=account&action=tokentx&address=0xe7ff9aceb3767b4514d403d1486b5d7f1b787989&startblock=0&endblock=25000000&sort=asc&apikey='\r\n        try {\r\n            const response = await fetch(url, {method: 'GET'})\r\n            let {result} = await response.json()\r\n            const exchangerHash = \"0xe7ff9aceb3767b4514d403d1486b5d7f1b787989\"\r\n            const startPoint = result[result.length - 1].timeStamp - numberSeconds\r\n            const transactionsPerDay = result.filter(({timeStamp, tokenSymbol}) => timeStamp > startPoint && tokenSymbol === \"DFX\")\r\n            const returnDfx = transactionsPerDay.filter(({to}) => to === exchangerHash) //транзакции по возврату DFX\r\n            const acceptedDfx = transactionsPerDay.filter(({from}) => from === exchangerHash) //транзакции по обмену на DFX\r\n            const quantityReturnDfx = this.roundNum(returnDfx.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) //сумма возврата DFX\r\n            const quantityAcceptedDfx = this.roundNum(acceptedDfx.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) // сумма обмена на DFX\r\n            const totalSumDfx = quantityReturnDfx + quantityAcceptedDfx\r\n\r\n            //получаем сумму за предыдущие сутки\r\n            const startPointForThePreviousDay = result[result.length - 1].timeStamp - 172800\r\n            const totalSumDfxForThePreviousDay = result\r\n                                                .filter(({timeStamp, tokenSymbol}) => timeStamp > startPointForThePreviousDay && timeStamp < startPoint && tokenSymbol === \"DFX\")\r\n                                                .reduce((acc, el) => acc + el.value / (10 ** 18), 0)\r\n\r\n\r\n            this.setState({\r\n                inputDfxPancakeSwap: quantityReturnDfx,\r\n                outputDfxPancakeSwap: quantityAcceptedDfx,\r\n                percentInputDfxPancakeSwap: this.roundNum(quantityReturnDfx * 100 / totalSumDfx),\r\n                percentOutputDfxPancakeSwap: this.roundNum(quantityAcceptedDfx * 100 / totalSumDfx),\r\n                totalSumPancake: totalSumDfx,\r\n                diffBetweenCurrentAndPreviousDayPancakeSwap: this.getDiffPercent(totalSumDfx, totalSumDfxForThePreviousDay)\r\n            })\r\n                        \r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    updateDataFarmingPool = async () => {\r\n        const url = 'https://api.bscscan.com/api?module=account&action=tokentx&address=0x9d943FD36adD58C42568EA1459411b291FF7035F&startblock=0&endblock=25000000&sort=asc&apikey='\r\n        try {\r\n            const response = await fetch(url, {method: 'GET'})\r\n            let {result} = await response.json()\r\n            const farmingPoolHash = \"0x9d943fd36add58c42568ea1459411b291ff7035f\"\r\n            const startPoint = result[result.length - 1].timeStamp - numberSeconds\r\n            const transactionsPerDay = result.filter(({timeStamp, tokenSymbol}) => timeStamp > startPoint && tokenSymbol === \"DFX\")\r\n            const inputPool = transactionsPerDay.filter(({to}) => to === farmingPoolHash) //вход в пул\r\n            const outputPool = transactionsPerDay.filter(({from}) => from === farmingPoolHash) //выход из пула\r\n            const totalSumAddPool = this.roundNum(inputPool.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) //сумма поступления в пул\r\n            const totalSumFromPool = this.roundNum(outputPool.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) // сумма выхода из пула\r\n            const totalSum = totalSumAddPool + totalSumFromPool\r\n\r\n            const startPointForThePreviousDay = result[result.length - 1].timeStamp - 172800\r\n            const totalSumDfxForThePreviousDayFarmingPool = result\r\n                                                .filter(({timeStamp, tokenSymbol}) => timeStamp > startPointForThePreviousDay && timeStamp < startPoint && tokenSymbol === \"DFX\")\r\n                                                .reduce((acc, el) => acc + el.value / (10 ** 18), 0)\r\n            this.setState({\r\n                inputDfxFarmingPool: totalSumAddPool, \r\n                outputDfxFarmingPool: totalSumFromPool, \r\n                percentInputDfxFarmingPool: this.roundNum(totalSumAddPool * 100 / totalSum),\r\n                percentOutputDfxFarmingPool: this.roundNum(totalSumFromPool * 100 / totalSum),\r\n                totalSumFarming: totalSum,\r\n                diffBetweenCurrentAndPreviousDayFarmingPool: this.getDiffPercent(totalSum, totalSumDfxForThePreviousDayFarmingPool)\r\n            })\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    updateDataDfxStaking = async () => {\r\n        const url = 'https://api.bscscan.com/api?module=account&action=tokentx&address=0x11340dC94E32310FA07CF9ae4cd8924c3cD483fe&startblock=0&endblock=25000000&sort=asc&apikey='\r\n        try {\r\n            const response = await fetch(url, {method: 'GET'})\r\n            let {result} = await response.json()\r\n            const dfxStakingHash = \"0x11340dc94e32310fa07cf9ae4cd8924c3cd483fe\"\r\n            const startPoint = result[result.length - 1].timeStamp - numberSeconds\r\n            const transactionsPerDay = result.filter(({timeStamp}) => timeStamp > startPoint)\r\n            const inputStaking = transactionsPerDay.filter(({to}) => to === dfxStakingHash) //вход в staking\r\n            const outputStaking = transactionsPerDay.filter(({from}) => from === dfxStakingHash) //выход из staking\r\n            const totalSumAddStaking = this.roundNum(inputStaking.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) //сумма поступления в staking\r\n            const totalSumFromStaking = this.roundNum(outputStaking.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) // сумма выхода из staking\r\n            const totalSum = totalSumAddStaking + totalSumFromStaking\r\n\r\n            const startPointForThePreviousDay = result[result.length - 1].timeStamp - 172800\r\n            const totalSumDfxForThePreviousDayStaking = result\r\n                                                .filter(({timeStamp, tokenSymbol}) => timeStamp > startPointForThePreviousDay && timeStamp < startPoint)\r\n                                                .reduce((acc, el) => acc + el.value / (10 ** 18), 0)\r\n            this.setState({\r\n                inputDfxStaking: totalSumAddStaking, \r\n                outputDfxStaking: totalSumFromStaking, \r\n                percentInputDfxStaking: this.roundNum(totalSumAddStaking * 100 / totalSum),\r\n                percentOutputDfxStaking: this.roundNum(totalSumFromStaking * 100 / totalSum),\r\n                totalSumStaking: totalSum,\r\n                diffBetweenCurrentAndPreviousDayStaking: this.getDiffPercent(totalSum, totalSumDfxForThePreviousDayStaking)\r\n            })\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    getDataAnalysis = () => {\r\n        this.updateDataFarmingPool()\r\n        this.updateExchangerData()\r\n        this.updateDataDfxStaking()\r\n    }\r\n\r\n    startAnalysis = () => {\r\n        this.timerId = setInterval(this.getDataAnalysis, 30000)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDataAnalysis()\r\n        this.startAnalysis()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerId);\r\n      }\r\n\r\n    render() {\r\n        const {\r\n            percentInputDfxPancakeSwap, \r\n            percentOutputDfxPancakeSwap, \r\n            inputDfxPancakeSwap, \r\n            outputDfxPancakeSwap,\r\n            percentInputDfxFarmingPool,\r\n            percentOutputDfxFarmingPool,\r\n            inputDfxFarmingPool,\r\n            outputDfxFarmingPool,\r\n            percentInputDfxStaking, \r\n            percentOutputDfxStaking, \r\n            inputDfxStaking, \r\n            outputDfxStaking,\r\n            totalSumPancake,\r\n            totalSumFarming,\r\n            totalSumStaking,\r\n            diffBetweenCurrentAndPreviousDayPancakeSwap,\r\n            diffBetweenCurrentAndPreviousDayFarmingPool,\r\n            diffBetweenCurrentAndPreviousDayStaking\r\n\r\n        } = this.state\r\n\r\n        const getPercent = (val) => this.roundNum(val * 100 / (totalSumPancake + totalSumFarming + totalSumStaking))\r\n        let percentPancake = getPercent(totalSumPancake)\r\n        let percentFarming = getPercent(totalSumFarming)\r\n        let percentStaking = getPercent(totalSumStaking) \r\n    return (\r\n        <>\r\n        <Alert variant={'dark'}>Все суммы указаны в DFX.Данные берутся за последние 24 часа и обновляются каждые 30 секунд.</Alert>\r\n        <div>\r\n          <p><strong>Информация по обмену токена DFX</strong></p>\r\n          BUSD-DFX сумма - <Badge variant=\"success\">{inputDfxPancakeSwap}</Badge>\r\n          <ProgressBar variant=\"success\" now={percentInputDfxPancakeSwap} label={`${percentInputDfxPancakeSwap}%`} />\r\n          DFX-BUSD сумма - <Badge variant=\"danger\">{outputDfxPancakeSwap}</Badge>\r\n          <ProgressBar variant=\"danger\" now={percentOutputDfxPancakeSwap} label={`${percentOutputDfxPancakeSwap}%`} />\r\n        </div>\r\n        <Alert variant={'dark'}></Alert>\r\n        <Alert variant={'dark'}></Alert>\r\n        <div>\r\n          <p><strong>Информация по обороту на Dfx-FarmingPool</strong></p>\r\n          поступление на Dfx-FarmingPool сумма - <Badge variant=\"success\">{inputDfxFarmingPool}</Badge>\r\n          <ProgressBar variant=\"success\" now={percentInputDfxFarmingPool} label={`${percentInputDfxFarmingPool}%`} />\r\n          выход из Dfx-FarmingPool сумма - <Badge variant=\"danger\">{outputDfxFarmingPool}</Badge>\r\n          <ProgressBar variant=\"danger\" now={percentOutputDfxFarmingPool} label={`${percentOutputDfxFarmingPool}%`} />\r\n      </div>\r\n      <Alert variant={'dark'}></Alert>\r\n      <Alert variant={'dark'}></Alert>\r\n      <div>\r\n          <p><strong>Информация по обороту на Dfx-Staking</strong></p>\r\n          поступление на Dfx-Staking сумма - <Badge variant=\"success\">{inputDfxStaking}</Badge>\r\n          <ProgressBar variant=\"success\" now={percentInputDfxStaking} label={`${percentInputDfxStaking}%`} />\r\n          выход из Dfx-Staking сумма - <Badge variant=\"danger\">{outputDfxStaking}</Badge>\r\n          <ProgressBar variant=\"danger\" now={percentOutputDfxStaking} label={`${percentOutputDfxStaking}%`} />\r\n      </div>\r\n      <Alert variant={'dark'}></Alert>\r\n      <Alert variant={'dark'}></Alert>\r\n      <div>\r\n          <p><strong>Информация по общему обороту</strong></p>\r\n          оборот на PancakeSwap - <Badge variant=\"dark\">{`${totalSumPancake} (разница с предыдущими сутками: ${diffBetweenCurrentAndPreviousDayPancakeSwap})`}</Badge>\r\n          <ProgressBar striped variant=\"success\" now={percentPancake} label={`${percentPancake}%`} />\r\n          оборот на Farming - <Badge variant=\"dark\">{`${totalSumFarming} (разница с предыдущими сутками: ${diffBetweenCurrentAndPreviousDayFarmingPool})`}</Badge>\r\n          <ProgressBar striped variant=\"info\" now={percentFarming} label={`${percentFarming}%`} />\r\n          оборот на Dfx-Staking - <Badge variant=\"dark\">{`${totalSumStaking} (разница с предыдущими сутками: ${diffBetweenCurrentAndPreviousDayStaking})`}</Badge>\r\n          <ProgressBar striped variant=\"warning\" now={percentStaking} label={`${percentStaking}%`} />\r\n      </div>\r\n      <Alert variant={'dark'}></Alert>\r\n      <Alert variant={'dark'}></Alert>\r\n      </>\r\n    )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Jumbotron, Container} from 'react-bootstrap';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <Jumbotron fluid>\r\n          <Container>\r\n            <h1>dfx token analysis</h1>\r\n          </Container>\r\n        </Jumbotron>\r\n    )\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { Analysis } from './Components/Analysis';\nimport { Header } from './Components/Header';\n\n\n\nfunction App() {\n  return (\n    <>\n    <Header />\n    <Analysis />\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}