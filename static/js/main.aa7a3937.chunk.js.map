{"version":3,"sources":["Components/Analysis.jsx","Components/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["Analysis","props","updateExchangerData","a","fetch","method","response","json","result","exchangerHash","startPoint","length","timeStamp","transactionsPerDay","filter","tokenSymbol","returnDfx","to","acceptedDfx","from","quantityReturnDfx","reduce","acc","el","value","quantityAcceptedDfx","totalSumDfx","setState","inputDfxPancakeSwap","outputDfxPancakeSwap","percentInputDfxPancakeSwap","percentOutputDfxPancakeSwap","updateDataFarmingPool","farmingPoolHash","inputPool","outputPool","totalSumAddPool","totalSumFromPool","totalSum","inputDfxFarmingPool","outputDfxFarmingPool","percentInputDfxFarmingPool","percentOutputDfxFarmingPool","updateDataDfxStaking","dfxStakingHash","inputStaking","outputStaking","totalSumAddStaking","totalSumFromStaking","inputDfxStaking","outputDfxStaking","percentInputDfxStaking","percentOutputDfxStaking","getDataAnalysis","startAnalysis","timerId","setInterval","state","this","clearInterval","Badge","variant","ProgressBar","now","label","Alert","React","Component","Header","Jumbotron","fluid","Container","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa7a3937.chunk.js","sourcesContent":["import React from 'react';\r\nimport {ProgressBar, Container, Badge, Alert} from 'react-bootstrap';\r\n\r\nexport class Analysis extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            inputDfxPancakeSwap: null, \r\n            outputDfxPancakeSwap: null, \r\n            percentInputDfxPancakeSwap: 0, \r\n            percentOutputDfxPancakeSwap: 0,\r\n            inputDfxFarmingPool: null, \r\n            outputDfxFarmingPool: null, \r\n            percentInputDfxFarmingPool: 0, \r\n            percentOutputDfxFarmingPool: 0,\r\n            percentInputDfxStaking: null, \r\n            percentOutputDfxStaking: null,\r\n            inputDfxStaking: 0,\r\n            outputDfxStaking: 0\r\n\r\n        }\r\n    }\r\n\r\n    updateExchangerData = async () => {\r\n        const url = 'https://api.bscscan.com/api?module=account&action=tokentx&address=0xe7ff9aceb3767b4514d403d1486b5d7f1b787989&startblock=0&endblock=25000000&sort=asc&apikey='\r\n        try {\r\n            const response = await fetch(url, {method: 'GET'})\r\n            let {result} = await response.json()\r\n            const numberSeconds = 86400 //количество секунд в сутках, для фильтрации данных за сутки\r\n            const exchangerHash = \"0xe7ff9aceb3767b4514d403d1486b5d7f1b787989\"\r\n            const startPoint = result[result.length - 1].timeStamp - numberSeconds\r\n            const transactionsPerDay = result.filter(({timeStamp, tokenSymbol}) => timeStamp > startPoint && tokenSymbol === \"DFX\")\r\n            const returnDfx = transactionsPerDay.filter(({to}) => to === exchangerHash) //транзакции по возврату DFX\r\n            const acceptedDfx = transactionsPerDay.filter(({from}) => from === exchangerHash) //транзакции по обмену на DFX\r\n            const quantityReturnDfx = returnDfx.reduce((acc, el) => acc + el.value / (10 ** 18), 0) //сумма возврата DFX\r\n            const quantityAcceptedDfx = acceptedDfx.reduce((acc, el) => acc + el.value / (10 ** 18), 0) // сумма обмена на DFX\r\n            const totalSumDfx = quantityReturnDfx + quantityAcceptedDfx\r\n            this.setState({\r\n                inputDfxPancakeSwap: quantityReturnDfx,\r\n                outputDfxPancakeSwap: quantityAcceptedDfx,\r\n                percentInputDfxPancakeSwap: quantityReturnDfx * 100 / totalSumDfx,\r\n                percentOutputDfxPancakeSwap: quantityAcceptedDfx * 100 / totalSumDfx\r\n            })\r\n                        \r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    updateDataFarmingPool = async () => {\r\n        const url = 'https://api.bscscan.com/api?module=account&action=tokentx&address=0x9d943FD36adD58C42568EA1459411b291FF7035F&startblock=0&endblock=25000000&sort=asc&apikey='\r\n        try {\r\n            const response = await fetch(url, {method: 'GET'})\r\n            let {result} = await response.json()\r\n            const numberSeconds = 86400 //количество секунд в сутках, для фильтрации данных за сутки\r\n            const farmingPoolHash = \"0x9d943fd36add58c42568ea1459411b291ff7035f\"\r\n            const startPoint = result[result.length - 1].timeStamp - numberSeconds\r\n            const transactionsPerDay = result.filter(({timeStamp, tokenSymbol}) => timeStamp > startPoint && tokenSymbol === \"DFX\")\r\n            const inputPool = transactionsPerDay.filter(({to}) => to === farmingPoolHash) //вход в пул\r\n            const outputPool = transactionsPerDay.filter(({from}) => from === farmingPoolHash) //выход из пула\r\n            const totalSumAddPool = inputPool.reduce((acc, el) => acc + el.value / (10 ** 18), 0) //сумма поступления в пул\r\n            const totalSumFromPool = outputPool.reduce((acc, el) => acc + el.value / (10 ** 18), 0) // сумма выхода из пула\r\n            const totalSum = totalSumAddPool + totalSumFromPool\r\n            this.setState({\r\n                inputDfxFarmingPool: totalSumAddPool, \r\n                outputDfxFarmingPool: totalSumFromPool, \r\n                percentInputDfxFarmingPool: totalSumAddPool * 100 / totalSum,\r\n                percentOutputDfxFarmingPool: totalSumFromPool * 100 / totalSum\r\n            })\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    updateDataDfxStaking = async () => {\r\n        const url = 'https://api.bscscan.com/api?module=account&action=tokentx&address=0x11340dC94E32310FA07CF9ae4cd8924c3cD483fe&startblock=0&endblock=25000000&sort=asc&apikey='\r\n        try {\r\n            const response = await fetch(url, {method: 'GET'})\r\n            let {result} = await response.json()\r\n            const numberSeconds = 86400 //количество секунд в сутках, для фильтрации данных за сутки\r\n            const dfxStakingHash = \"0x11340dc94e32310fa07cf9ae4cd8924c3cd483fe\"\r\n            const startPoint = result[result.length - 1].timeStamp - numberSeconds\r\n            const transactionsPerDay = result.filter(({timeStamp}) => timeStamp > startPoint)\r\n            const inputStaking = transactionsPerDay.filter(({to}) => to === dfxStakingHash) //вход в staking\r\n            const outputStaking = transactionsPerDay.filter(({from}) => from === dfxStakingHash) //выход из staking\r\n            const totalSumAddStaking = inputStaking.reduce((acc, el) => acc + el.value / (10 ** 18), 0) //сумма поступления в staking\r\n            const totalSumFromStaking = outputStaking.reduce((acc, el) => acc + el.value / (10 ** 18), 0) // сумма выхода из staking\r\n            const totalSum = totalSumAddStaking + totalSumFromStaking\r\n            this.setState({\r\n                inputDfxStaking: totalSumAddStaking, \r\n                outputDfxStaking: totalSumFromStaking, \r\n                percentInputDfxStaking: totalSumAddStaking * 100 / totalSum,\r\n                percentOutputDfxStaking: totalSumFromStaking * 100 / totalSum\r\n            })\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    getDataAnalysis = () => {\r\n        this.updateDataFarmingPool()\r\n        this.updateExchangerData()\r\n        this.updateDataDfxStaking()\r\n    }\r\n\r\n    startAnalysis = () => {\r\n        this.timerId = setInterval(this.getDataAnalysis, 30000)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDataAnalysis()\r\n        this.startAnalysis()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerId);\r\n      }\r\n\r\n    render() {\r\n        const {\r\n            percentInputDfxPancakeSwap, \r\n            percentOutputDfxPancakeSwap, \r\n            inputDfxPancakeSwap, \r\n            outputDfxPancakeSwap,\r\n            percentInputDfxFarmingPool,\r\n            percentOutputDfxFarmingPool,\r\n            inputDfxFarmingPool,\r\n            outputDfxFarmingPool,\r\n            percentInputDfxStaking, \r\n            percentOutputDfxStaking, \r\n            inputDfxStaking, \r\n            outputDfxStaking\r\n        } = this.state\r\n    return (\r\n        <>\r\n        <div>\r\n          <p><strong>Информация по обмену токена DFX</strong></p>\r\n          BUSD-DFX сумма - <Badge variant=\"success\">{inputDfxPancakeSwap}</Badge>\r\n          <ProgressBar variant=\"success\" now={percentInputDfxPancakeSwap} label={`${percentInputDfxPancakeSwap}%`} />\r\n          DFX-BUSD сумма - <Badge variant=\"danger\">{outputDfxPancakeSwap}</Badge>\r\n          <ProgressBar variant=\"danger\" now={percentOutputDfxPancakeSwap} label={`${percentOutputDfxPancakeSwap}%`} />\r\n        </div>\r\n        <Alert variant={'dark'}></Alert>\r\n        <Alert variant={'dark'}></Alert>\r\n        <div>\r\n          <p><strong>Информация по обороту на Dfx-FarmingPool</strong></p>\r\n          поступление на Dfx-FarmingPool - <Badge variant=\"success\">{inputDfxFarmingPool}</Badge>\r\n          <ProgressBar variant=\"success\" now={percentInputDfxFarmingPool} label={`${percentInputDfxFarmingPool}%`} />\r\n          выход из Dfx-FarmingPool - <Badge variant=\"danger\">{outputDfxFarmingPool}</Badge>\r\n          <ProgressBar variant=\"danger\" now={percentOutputDfxFarmingPool} label={`${percentOutputDfxFarmingPool}%`} />\r\n      </div>\r\n      <Alert variant={'dark'}></Alert>\r\n      <Alert variant={'dark'}></Alert>\r\n      <div>\r\n          <p><strong>Информация по обороту на Dfx-Staking</strong></p>\r\n          поступление на Dfx-Staking - <Badge variant=\"success\">{inputDfxStaking}</Badge>\r\n          <ProgressBar variant=\"success\" now={percentInputDfxStaking} label={`${percentInputDfxStaking}%`} />\r\n          выход из Dfx-Staking - <Badge variant=\"danger\">{outputDfxStaking}</Badge>\r\n          <ProgressBar variant=\"danger\" now={percentOutputDfxStaking} label={`${percentOutputDfxStaking}%`} />\r\n      </div>\r\n      <Alert variant={'dark'}></Alert>\r\n      <Alert variant={'dark'}></Alert>\r\n      </>\r\n    )\r\n    }\r\n}","import React from 'react';\r\nimport {Jumbotron, Container} from 'react-bootstrap';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <Jumbotron fluid>\r\n          <Container>\r\n            <h1>dfx token analysis</h1>\r\n          </Container>\r\n        </Jumbotron>\r\n    )\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { Analysis } from './Components/Analysis';\nimport { Header } from './Components/Header';\n\n\n\nfunction App() {\n  return (\n    <>\n    <Header />\n    <Analysis />\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}