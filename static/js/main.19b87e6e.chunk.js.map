{"version":3,"sources":["Components/Header.jsx","Components/TableFarming.jsx","Components/TableTotalReceiptAmount.jsx","Components/DfxUserData.jsx","Components/Analysis.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","Jumbotron","fluid","Container","Nav","className","NavLink","to","TableFarming","props","dataFarmingFrom","dataFarmingTo","keysFrom","Object","keys","keysTo","Table","striped","bordered","hover","variant","style","marginBottom","map","k","TableTotalReceiptAmount","totalReceiptsFromUniqueAddresses","totalAmountOfItemsSentToUniqueAddresses","address","filter","sortByUniqueValue","dataBy","sortBy","reduce","acc","el","hasOwnProperty","value","Number","newValue","DfxUserData","useState","setAddress","dfx","setDfx","stDfx","setStDfx","dDai","setDdai","cakeLp","setCakeLp","dfUsdtLp","setdfUsdtLp","dfDaiLp","setdfDaiLp","dfBtcLp","setdfBtcLp","dfBusdLp","setdfBusdLp","inDfxSteking","setinDfxSteking","outDfxSteking","setOutDfxSteking","differenceInOutDfx","setdifferenceInOutDfx","setTotalReceiptsFromUniqueAddresses","settotalAmountOfItemsSentToUniqueAddresses","inStDfx","setinStDfx","outStDfx","setOutStDfx","differenceInOutStDfx","setdifferenceInOutStDfx","tokenTransaction","setDataTokenTransactions","setDataFarmingFrom","setDataFarmingTo","setErrorAddress","contracts","farming","transactionByFarming","a","fetch","method","response","json","result","inFar","outFar","from","dataInFar","dataOutFar","queryUrlforDfxTransactions","url","data","dataByDfx","tokenSymbol","dataFrom","dataTo","valueInDfxSteking","valueOutDfxSteking","console","log","setFun","tokens","queryUrlforBalance","contract","setData","newResult","Array","String","length","join","n","Math","floor","normalizeValue","getData","e","preventDefault","token","i","setTimeout","useEffect","stDfxTransactions","addressOutStDfxFromSteking","valueInStDfx","valueOutStDfx","Form","Row","Col","xs","Control","onChange","target","type","placeholder","Button","onClick","numberSeconds","Analysis","roundNum","getDiffPercent","sumCurrent","sumPrevious","dif","updateExchangerData","exchangerHash","startPoint","timeStamp","transactionsPerDay","returnDfx","acceptedDfx","quantityReturnDfx","quantityAcceptedDfx","totalSumDfx","startPointForThePreviousDay","totalSumDfxForThePreviousDay","setState","inputDfxPancakeSwap","outputDfxPancakeSwap","percentInputDfxPancakeSwap","percentOutputDfxPancakeSwap","totalSumPancake","diffBetweenCurrentAndPreviousDayPancakeSwap","updateDataFarmingPool","farmingPoolHash","inputPool","outputPool","totalSumAddPool","totalSumFromPool","totalSum","totalSumDfxForThePreviousDayFarmingPool","inputDfxFarmingPool","outputDfxFarmingPool","percentInputDfxFarmingPool","percentOutputDfxFarmingPool","totalSumFarming","diffBetweenCurrentAndPreviousDayFarmingPool","updateDataDfxStaking","dfxStakingHash","inputStaking","outputStaking","totalSumAddStaking","totalSumFromStaking","totalSumDfxForThePreviousDayStaking","inputDfxStaking","outputDfxStaking","percentInputDfxStaking","percentOutputDfxStaking","totalSumStaking","diffBetweenCurrentAndPreviousDayStaking","getDataAnalysis","startAnalysis","timerId","setInterval","state","this","clearInterval","getPercent","val","percentPancake","percentFarming","percentStaking","Alert","Badge","ProgressBar","now","label","React","Component","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19b87e6e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Jumbotron, Container, Nav, NavLink} from 'react-bootstrap';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <Jumbotron fluid>\r\n          <Container>\r\n            <h1>dfx token analysis</h1>\r\n          </Container>\r\n          <Nav className=\"mr-auto\">\r\n              <NavLink><Link to=\"/\">Анализ DFX</Link></NavLink>\r\n              <NavLink><Link to=\"/users\">Aнализ по адресу</Link></NavLink>\r\n          </Nav>\r\n        </Jumbotron>\r\n    )\r\n}\r\n","import {Table} from 'react-bootstrap';\r\nimport React from 'react';\r\n\r\nexport const TableFarming = (props) => {\r\n    const {\r\n        dataFarmingFrom, \r\n        dataFarmingTo,\r\n        } = props\r\n    const keysFrom = Object.keys(dataFarmingFrom)\r\n    const keysTo = Object.keys(dataFarmingTo)\r\n    return (\r\n        <div>\r\n            Данные по поступлению с адреса контракта 0x9d943fd36add58c42568ea1459411b291ff7035f на адресс пользователя (общие суммы за все время)\r\n            <Table striped bordered hover variant=\"dark\" style={{marginBottom: '40px'}}>\r\n            {keysFrom.map((k) => {\r\n                return (\r\n                    <tr key={k}>\r\n                      <td>{k}</td>\r\n                      <td>{dataFarmingFrom[k]}</td>\r\n                    </tr>\r\n                )\r\n            })}\r\n            </Table>\r\n            Данные по поступлению с адреса пользователя на адресс контракта 0x9d943fd36add58c42568ea1459411b291ff7035f (общие суммы за все время)\r\n            <Table striped bordered hover variant=\"dark\" style={{marginBottom: '40px'}}>\r\n            {keysTo.map((k) => {\r\n                return (\r\n                    <tr key={k}>\r\n                      <td>{k}</td>\r\n                      <td>{dataFarmingTo[k]}</td>\r\n                    </tr>\r\n                )\r\n            })}\r\n            </Table>\r\n        </div>\r\n    )\r\n}","import {Table} from 'react-bootstrap';\r\nimport React from 'react';\r\n\r\nexport const TableTotalReceiptAmount = (props) => {\r\n    const { totalReceiptsFromUniqueAddresses, totalAmountOfItemsSentToUniqueAddresses, address} = props\r\n        \r\n    const keysFrom = Object.keys(totalReceiptsFromUniqueAddresses).filter((k) => k !== address)\r\n    const keysTo = Object.keys(totalAmountOfItemsSentToUniqueAddresses).filter((k) => k !== address)\r\n    return (\r\n        <div>\r\n            Все суммы токена DFX поступившие c уникальных адресов на адрес пользователя (происходит фильтрация по уникальным адресам и сложение всех сумм отправленных за все время на адрес пользователя). \r\n            <Table striped bordered hover variant=\"dark\" style={{marginBottom: '40px'}}>\r\n            {keysFrom.map((k) => {\r\n                return (\r\n                    <tr key={k}>\r\n                      <td>{k}</td>\r\n                      <td>{totalReceiptsFromUniqueAddresses[k]}</td>\r\n                    </tr>\r\n                )\r\n            })}\r\n            </Table>\r\n            Все суммы токена DFX поступившие от адреса пользователя на уникальные адреса (происходит фильтрация по уникальным адресам и сложение всех сумм отправленных за все время на эти адреса пользователем).\r\n            <Table striped bordered hover variant=\"dark\">\r\n            {keysTo.map((k) => {\r\n                return (\r\n                    <tr key={k}>\r\n                      <td>{k}</td>\r\n                      <td>{totalAmountOfItemsSentToUniqueAddresses[k]}</td>\r\n                    </tr>\r\n                )\r\n            })}\r\n            </Table>\r\n        </div>\r\n    )\r\n}","import {Button, Spinner, Col, Form, Table, Row} from 'react-bootstrap';\r\nimport React, {useEffect, useState} from 'react';\r\nimport { TableFarming } from './TableFarming';\r\nimport { TableTotalReceiptAmount } from './TableTotalReceiptAmount';\r\n\r\n\r\nconst sortByUniqueValue = (dataBy, sortBy) => {\r\n  const result = dataBy.reduce((acc, el) => {\r\n  if (acc.hasOwnProperty(el[sortBy])) {\r\n  let value = Number(el.value) / (10 ** 18)\r\n  let currentValue = acc[el[sortBy]]\r\n  let newValue = currentValue + value  \r\n  acc[el[sortBy]] = newValue\r\n  return acc\r\n  }\r\n  let value = Number(el.value) / (10 ** 18)\r\n  acc[el[sortBy]] = value\r\n  return acc\r\n  }, {})\r\n  return result\r\n}\r\n  \r\nexport const DfxUserData = () => {\r\n  const [address, setAddress] = useState('')\r\n  const [dfx, setDfx] = useState(0)\r\n  const [stDfx, setStDfx] = useState(0)\r\n  const [dDai, setDdai] = useState(0)\r\n  const [cakeLp, setCakeLp] = useState(0)\r\n  const [dfUsdtLp, setdfUsdtLp] = useState(0)\r\n  const [dfDaiLp, setdfDaiLp] = useState(0)\r\n  const [dfBtcLp, setdfBtcLp] = useState(0)\r\n  const [dfBusdLp, setdfBusdLp] = useState(0)\r\n  const [inDfxSteking, setinDfxSteking] = useState(0)\r\n  const [outDfxSteking, setOutDfxSteking] = useState(0)\r\n  const [differenceInOutDfx, setdifferenceInOutDfx] = useState(0)\r\n  const [totalReceiptsFromUniqueAddresses, setTotalReceiptsFromUniqueAddresses] = useState(null)\r\n  const [totalAmountOfItemsSentToUniqueAddresses, settotalAmountOfItemsSentToUniqueAddresses] = useState(null)\r\n  const [inStDfx, setinStDfx] = useState(0)\r\n  const [outStDfx, setOutStDfx] = useState(0)\r\n  const [differenceInOutStDfx, setdifferenceInOutStDfx] = useState(0)\r\n  const [tokenTransaction, setDataTokenTransactions] = useState(null)\r\n  const [dataFarmingFrom, setDataFarmingFrom] = useState({})\r\n  const [dataFarmingTo, setDataFarmingTo] = useState({})\r\n  const [errorAddress, setErrorAddress] = useState(false)\r\n  \r\n  const contracts = {\r\n    dfx: '0x74b3abb94e9e1ecc25bd77d6872949b4a9b2aacf',\r\n    stDfx: '0x11340dc94e32310fa07cf9ae4cd8924c3cd483fe',\r\n    dDai: '0x308853aec7cf0ecf133ed19c0c1fb3b35f5a4e7b',\r\n    cakeLp: '0xe7ff9aceb3767b4514d403d1486b5d7f1b787989',\r\n    dfUsdtLp: '0xb7552a0463515bda8b47ab7503ca893e52c58df8',\r\n    dfDaiLp: '0x8427d2ed4a4c0a88b773b34f5b78b1903b529a22',\r\n    dfBtcLp: '0xdae114f3deb7bcaef97ab53c3cd25bebf4014eae',\r\n    dfBusdLp: '0x987f04dece1c5ae9e69cf4f93d00bbe2ca5af98c',\r\n    farming: '0x9d943fd36add58c42568ea1459411b291ff7035f',\r\n  }\r\n\r\n  const roundNum = (n) => Math.floor(n * 100) / 100\r\n\r\n  const stDfxTransactions =  () => {\r\n    if (tokenTransaction) {\r\n    const stDfxTransactions = tokenTransaction.filter((el) => el.tokenSymbol === \"stDFX\")\r\n    const addressOutStDfxFromSteking = '0x0000000000000000000000000000000000000000'\r\n    const valueInStDfx = sortByUniqueValue(stDfxTransactions, 'from')[addressOutStDfxFromSteking]\r\n    const valueOutStDfx = sortByUniqueValue(stDfxTransactions, 'to')[addressOutStDfxFromSteking]\r\n    setinStDfx(valueInStDfx)\r\n    setOutStDfx(valueOutStDfx)\r\n    setdifferenceInOutStDfx(valueInStDfx && valueInStDfx - valueOutStDfx)\r\n    }\r\n    return\r\n  }\r\n\r\n  const transactionByFarming = async () => {\r\n    if (tokenTransaction) {\r\n      const response = await fetch(\r\n        'https://api.bscscan.com/api?module=account&action=tokentx&address=0x9d943fd36add58c42568ea1459411b291ff7035f&startblock=0&endblock=25000000&sort=asc&apikey='\r\n        , {method: 'GET'}\r\n      )\r\n      let {result} = await response.json()\r\n      const inFar = result.filter((el) => el.to === address) //когда на адреc пользователя\r\n      const outFar = result.filter((el) => el.from === address) //когда от адреса пользователя\r\n      const dataInFar = sortByUniqueValue(inFar, 'tokenSymbol')\r\n      const dataOutFar = sortByUniqueValue(outFar, 'tokenSymbol')\r\n      setDataFarmingFrom(dataInFar)\r\n      setDataFarmingTo(dataOutFar)\r\n    }\r\n    return\r\n  }\r\n \r\n  const queryUrlforDfxTransactions = async () => {\r\n\r\n    const url = `https://api.bscscan.com/api?module=account&action=tokentx&address=${address}&startblock=0&endblock=25000000&sort=asc&apikey=`\r\n    const response = await fetch(url, {method: 'GET'})\r\n    let data = await response.json()\r\n    setDataTokenTransactions(data.result)\r\n\r\nconst dataByDfx = data.result.filter((el) => el.tokenSymbol === \"DFX\")\r\nconst dataFrom = sortByUniqueValue(dataByDfx, 'from')\r\nconst dataTo =  sortByUniqueValue(dataByDfx, 'to')\r\nsetTotalReceiptsFromUniqueAddresses(dataFrom)\r\nsettotalAmountOfItemsSentToUniqueAddresses(dataTo)\r\nconst valueInDfxSteking = dataTo[contracts.stDfx]\r\nconst valueOutDfxSteking = dataFrom[contracts.stDfx]\r\nsetinDfxSteking(valueInDfxSteking)\r\nsetOutDfxSteking(valueOutDfxSteking)\r\nconsole.log(valueInDfxSteking)\r\nsetdifferenceInOutDfx(valueInDfxSteking && valueInDfxSteking - valueOutDfxSteking)\r\n}\r\n\r\n  const setFun = {dfx: setDfx, stDfx: setStDfx, dDai: setDdai,\r\n                  cakeLp: setCakeLp, dfUsdtLp: setdfUsdtLp, dfDaiLp: setdfDaiLp,\r\n                  dfBtcLp: setdfBtcLp, dfBusdLp: setdfBusdLp}\r\n                  \r\n  //чтобы добавить еще запрос, нужно добавить хук, функцию хука в setFun, и адрес в contracts и в setFun\r\n\r\n  const tokens = Object.keys(contracts)\r\n\r\n  const queryUrlforBalance = async (contract, setData) => {\r\n    const url = `https://api.bscscan.com/api?module=account&action=tokenbalance&contractaddress=${contract}&address=${address}&tag=latest&apikey=YourApiKeyToken`\r\n    try {\r\n    const response = await fetch(url, {method: 'GET'})\r\n    let {result} = await response.json()\r\n    \r\n     const normalizeValue = () => {\r\n        if (result !== '0') {\r\n            if (result < 999999999999999999) {\r\n                return '0,' + [...Array(18 - String(result).length)].map((a) => '0').join('') + String(result)\r\n                } \r\n                return roundNum(result / (10 ** 18))\r\n    }\r\n    return '0'\r\n  }\r\n    let newResult = normalizeValue()\r\n    await setData(newResult)\r\n    \r\n    } catch (error) {\r\n            \r\n    } \r\n  }\r\n  \r\n  const getData = async (e) => {\r\n    e.preventDefault()\r\n    if (address.length !== 42) {\r\n      setErrorAddress(true)\r\n      return\r\n    }\r\n    setErrorAddress(false)\r\n    tokens.map((token, i) => {\r\n    let delayTime = (i * 400) + 500\r\n      setTimeout(() => queryUrlforBalance(contracts[token], setFun[token]), delayTime)\r\n    } )\r\n    setTimeout(queryUrlforDfxTransactions, 3000)\r\n  }\r\n   \r\n   useEffect(stDfxTransactions, [tokenTransaction])\r\n   useEffect(transactionByFarming, [tokenTransaction])\r\n   \r\n  \r\n  return (\r\n    <div style={{marginBottom: '20px'}}>\r\n      <Form style={{marginBottom: '20px'}} >\r\n        <Form.Row>\r\n          <Col xs={7}>\r\n          <Form.Control \r\n          onChange={e => setAddress(e.target.value)} \r\n          type=\"text\" value={address} \r\n          placeholder=\"Введите адрес чтобы получить данные\" \r\n          />\r\n          </Col>\r\n          <Col>\r\n            <Button onClick={getData} variant=\"primary\" type=\"submit\">\r\n              get data   \r\n            </Button>\r\n          </Col>\r\n        </Form.Row>\r\n      </Form>\r\n     <Table striped bordered hover variant=\"dark\" style={{marginBottom: '30px'}}>\r\n  <thead>\r\n    <tr>\r\n      <th>address</th>\r\n      <th>DFX</th>\r\n      <th>stDFX</th>\r\n      <th>dDai</th>\r\n      <th>cakeLp</th>\r\n      <th>DF-USDT-LP</th>\r\n      <th>DF-DAI-LP</th>\r\n      <th>DF-BTC-LP</th>\r\n      <th>DF-BUSD-LP</th>\r\n      <th>Lp farming</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>{address}</td>\r\n      <td>{dfx}</td>\r\n      <td>{stDfx}</td>\r\n      <td>{dDai}</td>\r\n      <td>{cakeLp}</td>\r\n      <td>{dfUsdtLp}</td>\r\n      <td>{dfDaiLp}</td>\r\n      <td>{dfBtcLp}</td>\r\n      <td>{dfBusdLp}</td>\r\n      <td>{}</td>\r\n    </tr>\r\n  </tbody>\r\n    </Table>\r\n    <Table striped bordered hover variant=\"dark\" style={{marginBottom: '30px'}}>\r\n  <thead>\r\n    <tr>\r\n      <th>поступление DFX на Dfx-Staking</th>\r\n      <th>выход DFX из Dfx-Staking</th>\r\n      <th>разница в DFX между out-in</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>{inDfxSteking}</td>\r\n      <td>{outDfxSteking}</td>\r\n      <td>{differenceInOutDfx && differenceInOutDfx}</td>\r\n    </tr>\r\n  </tbody>\r\n</Table>\r\n<Table striped bordered hover variant=\"dark\" style={{marginBottom: '30px'}}>\r\n  <thead>\r\n    <tr>\r\n      <th>получение stDfx</th>\r\n      <th>возврат stDfx</th>\r\n      <th>разница в stDFX между in-out</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>{inStDfx}</td>\r\n      <td>{outStDfx}</td>\r\n      <td>{differenceInOutStDfx && differenceInOutStDfx}</td>\r\n    </tr>\r\n  </tbody>\r\n</Table>\r\n{dataFarmingTo && Object.keys(dataFarmingTo).length !== 0 && <TableFarming dataFarmingTo={dataFarmingTo} \r\n                  dataFarmingFrom={dataFarmingFrom}\r\n                  /> \r\n                  }\r\n   {totalAmountOfItemsSentToUniqueAddresses && Object.keys(totalAmountOfItemsSentToUniqueAddresses).length !== 0 && <TableTotalReceiptAmount totalReceiptsFromUniqueAddresses={totalReceiptsFromUniqueAddresses} \r\n                             totalAmountOfItemsSentToUniqueAddresses={totalAmountOfItemsSentToUniqueAddresses}\r\n                             address={address}\r\n                             />}               \r\n    </div>\r\n \r\n  )\r\n}\r\n","import React from 'react';\r\nimport {ProgressBar, Container, Badge, Alert} from 'react-bootstrap';\r\n\r\n\r\nconst numberSeconds = 86400 //количество секунд в сутках, для фильтрации данных за сутки\r\n\r\nexport class Analysis extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            inputDfxPancakeSwap: null, \r\n            outputDfxPancakeSwap: null, \r\n            percentInputDfxPancakeSwap: 0, \r\n            percentOutputDfxPancakeSwap: 0,\r\n            inputDfxFarmingPool: null, \r\n            outputDfxFarmingPool: null, \r\n            percentInputDfxFarmingPool: 0, \r\n            percentOutputDfxFarmingPool: 0,\r\n            percentInputDfxStaking: null, \r\n            percentOutputDfxStaking: null,\r\n            inputDfxStaking: 0,\r\n            outputDfxStaking: 0,\r\n            totalSumPancake: 0,\r\n            totalSumFarming: 0,\r\n            totalSumStaking: 0,\r\n            diffBetweenCurrentAndPreviousDayPancakeSwap: '',\r\n            diffBetweenCurrentAndPreviousDayFarmingPool: '',\r\n            diffBetweenCurrentAndPreviousDayStaking: ''\r\n\r\n        }\r\n    }\r\n\r\n    roundNum = (n) => Math.floor(n * 100) / 100\r\n\r\n    getDiffPercent = (sumCurrent, sumPrevious) => {\r\n        const dif = sumCurrent - sumPrevious\r\n              if ( dif < 0) {\r\n                  return `${Math.floor(100 * dif / sumPrevious)}%`\r\n              }\r\n              return `+${Math.floor(100 * dif / sumCurrent)}%`\r\n          }\r\n\r\n    updateExchangerData = async () => {\r\n        const url = 'https://api.bscscan.com/api?module=account&action=tokentx&address=0xe7ff9aceb3767b4514d403d1486b5d7f1b787989&startblock=0&endblock=25000000&sort=asc&apikey='\r\n        try {\r\n            const response = await fetch(url, {method: 'GET'})\r\n            let {result} = await response.json()\r\n            const exchangerHash = \"0xe7ff9aceb3767b4514d403d1486b5d7f1b787989\"\r\n            const startPoint = result[result.length - 1].timeStamp - numberSeconds\r\n            const transactionsPerDay = result.filter(({timeStamp, tokenSymbol}) => timeStamp > startPoint && tokenSymbol === \"DFX\")\r\n            const returnDfx = transactionsPerDay.filter(({to}) => to === exchangerHash) //транзакции по возврату DFX\r\n            const acceptedDfx = transactionsPerDay.filter(({from}) => from === exchangerHash) //транзакции по обмену на DFX\r\n            const quantityReturnDfx = this.roundNum(returnDfx.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) //сумма возврата DFX\r\n            const quantityAcceptedDfx = this.roundNum(acceptedDfx.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) // сумма обмена на DFX\r\n            const totalSumDfx = quantityReturnDfx + quantityAcceptedDfx\r\n\r\n            //получаем сумму за предыдущие сутки\r\n            const startPointForThePreviousDay = result[result.length - 1].timeStamp - 172800\r\n            const totalSumDfxForThePreviousDay = result\r\n                                                .filter(({timeStamp, tokenSymbol}) => timeStamp > startPointForThePreviousDay && timeStamp < startPoint && tokenSymbol === \"DFX\")\r\n                                                .reduce((acc, el) => acc + el.value / (10 ** 18), 0)\r\n\r\n\r\n            this.setState({\r\n                inputDfxPancakeSwap: quantityReturnDfx,\r\n                outputDfxPancakeSwap: quantityAcceptedDfx,\r\n                percentInputDfxPancakeSwap: this.roundNum(quantityReturnDfx * 100 / totalSumDfx),\r\n                percentOutputDfxPancakeSwap: this.roundNum(quantityAcceptedDfx * 100 / totalSumDfx),\r\n                totalSumPancake: totalSumDfx,\r\n                diffBetweenCurrentAndPreviousDayPancakeSwap: this.getDiffPercent(totalSumDfx, totalSumDfxForThePreviousDay)\r\n            })\r\n                        \r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    updateDataFarmingPool = async () => {\r\n        const url = 'https://api.bscscan.com/api?module=account&action=tokentx&address=0x9d943FD36adD58C42568EA1459411b291FF7035F&startblock=0&endblock=25000000&sort=asc&apikey='\r\n        try {\r\n            const response = await fetch(url, {method: 'GET'})\r\n            let {result} = await response.json()\r\n            const farmingPoolHash = \"0x9d943fd36add58c42568ea1459411b291ff7035f\"\r\n            const startPoint = result[result.length - 1].timeStamp - numberSeconds\r\n            const transactionsPerDay = result.filter(({timeStamp, tokenSymbol}) => timeStamp > startPoint && tokenSymbol === \"DFX\")\r\n            const inputPool = transactionsPerDay.filter(({to}) => to === farmingPoolHash) //вход в пул\r\n            const outputPool = transactionsPerDay.filter(({from}) => from === farmingPoolHash) //выход из пула\r\n            const totalSumAddPool = this.roundNum(inputPool.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) //сумма поступления в пул\r\n            const totalSumFromPool = this.roundNum(outputPool.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) // сумма выхода из пула\r\n            const totalSum = totalSumAddPool + totalSumFromPool\r\n\r\n            const startPointForThePreviousDay = result[result.length - 1].timeStamp - 172800\r\n            const totalSumDfxForThePreviousDayFarmingPool = result\r\n                                                .filter(({timeStamp, tokenSymbol}) => timeStamp > startPointForThePreviousDay && timeStamp < startPoint && tokenSymbol === \"DFX\")\r\n                                                .reduce((acc, el) => acc + el.value / (10 ** 18), 0)\r\n            this.setState({\r\n                inputDfxFarmingPool: totalSumAddPool, \r\n                outputDfxFarmingPool: totalSumFromPool, \r\n                percentInputDfxFarmingPool: this.roundNum(totalSumAddPool * 100 / totalSum),\r\n                percentOutputDfxFarmingPool: this.roundNum(totalSumFromPool * 100 / totalSum),\r\n                totalSumFarming: totalSum,\r\n                diffBetweenCurrentAndPreviousDayFarmingPool: this.getDiffPercent(totalSum, totalSumDfxForThePreviousDayFarmingPool)\r\n            })\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    updateDataDfxStaking = async () => {\r\n        const url = 'https://api.bscscan.com/api?module=account&action=tokentx&address=0x11340dC94E32310FA07CF9ae4cd8924c3cD483fe&startblock=0&endblock=25000000&sort=asc&apikey='\r\n        try {\r\n            const response = await fetch(url, {method: 'GET'})\r\n            let {result} = await response.json()\r\n            const dfxStakingHash = \"0x11340dc94e32310fa07cf9ae4cd8924c3cd483fe\"\r\n            const startPoint = result[result.length - 1].timeStamp - numberSeconds\r\n            const transactionsPerDay = result.filter(({timeStamp}) => timeStamp > startPoint)\r\n            const inputStaking = transactionsPerDay.filter(({to}) => to === dfxStakingHash) //вход в staking\r\n            const outputStaking = transactionsPerDay.filter(({from}) => from === dfxStakingHash) //выход из staking\r\n            const totalSumAddStaking = this.roundNum(inputStaking.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) //сумма поступления в staking\r\n            const totalSumFromStaking = this.roundNum(outputStaking.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) // сумма выхода из staking\r\n            const totalSum = totalSumAddStaking + totalSumFromStaking\r\n\r\n            const startPointForThePreviousDay = result[result.length - 1].timeStamp - 172800\r\n            const totalSumDfxForThePreviousDayStaking = result\r\n                                                .filter(({timeStamp, tokenSymbol}) => timeStamp > startPointForThePreviousDay && timeStamp < startPoint)\r\n                                                .reduce((acc, el) => acc + el.value / (10 ** 18), 0)\r\n            this.setState({\r\n                inputDfxStaking: totalSumAddStaking, \r\n                outputDfxStaking: totalSumFromStaking, \r\n                percentInputDfxStaking: this.roundNum(totalSumAddStaking * 100 / totalSum),\r\n                percentOutputDfxStaking: this.roundNum(totalSumFromStaking * 100 / totalSum),\r\n                totalSumStaking: totalSum,\r\n                diffBetweenCurrentAndPreviousDayStaking: this.getDiffPercent(totalSum, totalSumDfxForThePreviousDayStaking)\r\n            })\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    getDataAnalysis = () => {\r\n        this.updateDataFarmingPool()\r\n        this.updateExchangerData()\r\n        this.updateDataDfxStaking()\r\n    }\r\n\r\n    startAnalysis = () => {\r\n        this.timerId = setInterval(this.getDataAnalysis, 200000)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDataAnalysis()\r\n        this.startAnalysis()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerId);\r\n      }\r\n\r\n    render() {\r\n        const {\r\n            percentInputDfxPancakeSwap, \r\n            percentOutputDfxPancakeSwap, \r\n            inputDfxPancakeSwap, \r\n            outputDfxPancakeSwap,\r\n            percentInputDfxFarmingPool,\r\n            percentOutputDfxFarmingPool,\r\n            inputDfxFarmingPool,\r\n            outputDfxFarmingPool,\r\n            percentInputDfxStaking, \r\n            percentOutputDfxStaking, \r\n            inputDfxStaking, \r\n            outputDfxStaking,\r\n            totalSumPancake,\r\n            totalSumFarming,\r\n            totalSumStaking,\r\n            diffBetweenCurrentAndPreviousDayPancakeSwap,\r\n            diffBetweenCurrentAndPreviousDayFarmingPool,\r\n            diffBetweenCurrentAndPreviousDayStaking\r\n\r\n        } = this.state\r\n\r\n        const getPercent = (val) => this.roundNum(val * 100 / (totalSumPancake + totalSumFarming + totalSumStaking))\r\n        let percentPancake = getPercent(totalSumPancake)\r\n        let percentFarming = getPercent(totalSumFarming)\r\n        let percentStaking = getPercent(totalSumStaking) \r\n    return (\r\n        <>\r\n        <Alert variant={'dark'}>Все суммы указаны в DFX.Данные берутся за последние 24 часа и обновляются каждые 30 секунд.</Alert>\r\n        <div style={{marginBottom: '40px'}}>\r\n          <p><strong>Информация по обмену токена DFX</strong></p>\r\n          BUSD-DFX сумма - <Badge variant=\"success\">{inputDfxPancakeSwap}</Badge>\r\n          <ProgressBar variant=\"success\" now={percentInputDfxPancakeSwap} label={`${percentInputDfxPancakeSwap}%`} />\r\n          DFX-BUSD сумма - <Badge variant=\"danger\">{outputDfxPancakeSwap}</Badge>\r\n          <ProgressBar variant=\"danger\" now={percentOutputDfxPancakeSwap} label={`${percentOutputDfxPancakeSwap}%`} />\r\n        </div>\r\n        <div style={{marginBottom: '40px'}}>\r\n          <p><strong>Информация по обороту на Dfx-FarmingPool</strong></p>\r\n          поступление на Dfx-FarmingPool сумма - <Badge variant=\"success\">{inputDfxFarmingPool}</Badge>\r\n          <ProgressBar variant=\"success\" now={percentInputDfxFarmingPool} label={`${percentInputDfxFarmingPool}%`} />\r\n          выход из Dfx-FarmingPool сумма - <Badge variant=\"danger\">{outputDfxFarmingPool}</Badge>\r\n          <ProgressBar variant=\"danger\" now={percentOutputDfxFarmingPool} label={`${percentOutputDfxFarmingPool}%`} />\r\n      </div>\r\n      <div style={{marginBottom: '50px'}}>\r\n          <p><strong>Информация по обороту на Dfx-Staking</strong></p>\r\n          поступление на Dfx-Staking сумма - <Badge variant=\"success\">{inputDfxStaking}</Badge>\r\n          <ProgressBar variant=\"success\" now={percentInputDfxStaking} label={`${percentInputDfxStaking}%`} />\r\n          выход из Dfx-Staking сумма - <Badge variant=\"danger\">{outputDfxStaking}</Badge>\r\n          <ProgressBar variant=\"danger\" now={percentOutputDfxStaking} label={`${percentOutputDfxStaking}%`} />\r\n      </div>\r\n      <div style={{marginBottom: '60px'}}>\r\n          <p><strong>Информация по общему обороту</strong></p>\r\n          оборот на PancakeSwap - <Badge variant=\"dark\">{`${totalSumPancake} (разница с предыдущими сутками: ${diffBetweenCurrentAndPreviousDayPancakeSwap})`}</Badge>\r\n          <ProgressBar striped variant=\"success\" now={percentPancake} label={`${percentPancake}%`} />\r\n          оборот на Farming - <Badge variant=\"dark\">{`${totalSumFarming} (разница с предыдущими сутками: ${diffBetweenCurrentAndPreviousDayFarmingPool})`}</Badge>\r\n          <ProgressBar striped variant=\"info\" now={percentFarming} label={`${percentFarming}%`} />\r\n          оборот на Dfx-Staking - <Badge variant=\"dark\">{`${totalSumStaking} (разница с предыдущими сутками: ${diffBetweenCurrentAndPreviousDayStaking})`}</Badge>\r\n          <ProgressBar striped variant=\"warning\" now={percentStaking} label={`${percentStaking}%`} />\r\n      </div>\r\n      </>\r\n    )\r\n    }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { Header } from './Components/Header';\nimport { DfxUserData } from './Components/DfxUserData';\nimport {Analysis} from './Components/Analysis';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <>\n    <Router>\n    <Header />\n        <Switch>\n            <Route exact path=\"/\" component={Analysis} />\n            <Route path=\"/users\" component={DfxUserData} />\n        </Switch>\n    </Router>\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}