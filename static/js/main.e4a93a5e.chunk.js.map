{"version":3,"sources":["Components/Analysis.jsx","Components/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["numberSeconds","Analysis","props","roundNum","n","Math","floor","updateExchangerData","a","fetch","method","response","json","result","exchangerHash","startPoint","length","timeStamp","transactionsPerDay","filter","tokenSymbol","returnDfx","to","acceptedDfx","from","quantityReturnDfx","reduce","acc","el","value","quantityAcceptedDfx","totalSumDfx","setState","inputDfxPancakeSwap","outputDfxPancakeSwap","percentInputDfxPancakeSwap","percentOutputDfxPancakeSwap","totalSumPancake","updateDataFarmingPool","farmingPoolHash","inputPool","outputPool","totalSumAddPool","totalSumFromPool","totalSum","inputDfxFarmingPool","outputDfxFarmingPool","percentInputDfxFarmingPool","percentOutputDfxFarmingPool","totalSumFarming","updateDataDfxStaking","dfxStakingHash","inputStaking","outputStaking","totalSumAddStaking","totalSumFromStaking","inputDfxStaking","outputDfxStaking","percentInputDfxStaking","percentOutputDfxStaking","totalSumStaking","getDataAnalysis","startAnalysis","timerId","setInterval","state","this","clearInterval","getPercent","val","percentPancake","percentFarming","percentStaking","Alert","variant","Badge","ProgressBar","now","label","striped","React","Component","Header","Jumbotron","fluid","Container","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4a93a5e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {ProgressBar, Container, Badge, Alert} from 'react-bootstrap';\r\n\r\nconst numberSeconds = 86400 //количество секунд в сутках, для фильтрации данных за сутки\r\n\r\nexport class Analysis extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            inputDfxPancakeSwap: null, \r\n            outputDfxPancakeSwap: null, \r\n            percentInputDfxPancakeSwap: 0, \r\n            percentOutputDfxPancakeSwap: 0,\r\n            inputDfxFarmingPool: null, \r\n            outputDfxFarmingPool: null, \r\n            percentInputDfxFarmingPool: 0, \r\n            percentOutputDfxFarmingPool: 0,\r\n            percentInputDfxStaking: null, \r\n            percentOutputDfxStaking: null,\r\n            inputDfxStaking: 0,\r\n            outputDfxStaking: 0,\r\n            totalSumPancake: 0,\r\n            totalSumFarming: 0,\r\n            totalSumStaking: 0\r\n\r\n        }\r\n    }\r\n\r\n    roundNum = (n) => Math.floor(n * 100) / 100\r\n\r\n    updateExchangerData = async () => {\r\n        const url = 'https://api.bscscan.com/api?module=account&action=tokentx&address=0xe7ff9aceb3767b4514d403d1486b5d7f1b787989&startblock=0&endblock=25000000&sort=asc&apikey='\r\n        try {\r\n            const response = await fetch(url, {method: 'GET'})\r\n            let {result} = await response.json()\r\n            const exchangerHash = \"0xe7ff9aceb3767b4514d403d1486b5d7f1b787989\"\r\n            const startPoint = result[result.length - 1].timeStamp - numberSeconds\r\n            const transactionsPerDay = result.filter(({timeStamp, tokenSymbol}) => timeStamp > startPoint && tokenSymbol === \"DFX\")\r\n            const returnDfx = transactionsPerDay.filter(({to}) => to === exchangerHash) //транзакции по возврату DFX\r\n            const acceptedDfx = transactionsPerDay.filter(({from}) => from === exchangerHash) //транзакции по обмену на DFX\r\n            const quantityReturnDfx = this.roundNum(returnDfx.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) //сумма возврата DFX\r\n            const quantityAcceptedDfx = this.roundNum(acceptedDfx.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) // сумма обмена на DFX\r\n            const totalSumDfx = quantityReturnDfx + quantityAcceptedDfx\r\n            this.setState({\r\n                inputDfxPancakeSwap: quantityReturnDfx,\r\n                outputDfxPancakeSwap: quantityAcceptedDfx,\r\n                percentInputDfxPancakeSwap: this.roundNum(quantityReturnDfx * 100 / totalSumDfx),\r\n                percentOutputDfxPancakeSwap: this.roundNum(quantityAcceptedDfx * 100 / totalSumDfx),\r\n                totalSumPancake: totalSumDfx\r\n            })\r\n                        \r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    updateDataFarmingPool = async () => {\r\n        const url = 'https://api.bscscan.com/api?module=account&action=tokentx&address=0x9d943FD36adD58C42568EA1459411b291FF7035F&startblock=0&endblock=25000000&sort=asc&apikey='\r\n        try {\r\n            const response = await fetch(url, {method: 'GET'})\r\n            let {result} = await response.json()\r\n            //const numberSeconds = 86400 //количество секунд в сутках, для фильтрации данных за сутки\r\n            const farmingPoolHash = \"0x9d943fd36add58c42568ea1459411b291ff7035f\"\r\n            const startPoint = result[result.length - 1].timeStamp - numberSeconds\r\n            const transactionsPerDay = result.filter(({timeStamp, tokenSymbol}) => timeStamp > startPoint && tokenSymbol === \"DFX\")\r\n            const inputPool = transactionsPerDay.filter(({to}) => to === farmingPoolHash) //вход в пул\r\n            const outputPool = transactionsPerDay.filter(({from}) => from === farmingPoolHash) //выход из пула\r\n            const totalSumAddPool = this.roundNum(inputPool.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) //сумма поступления в пул\r\n            const totalSumFromPool = this.roundNum(outputPool.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) // сумма выхода из пула\r\n            const totalSum = totalSumAddPool + totalSumFromPool\r\n            this.setState({\r\n                inputDfxFarmingPool: totalSumAddPool, \r\n                outputDfxFarmingPool: totalSumFromPool, \r\n                percentInputDfxFarmingPool: this.roundNum(totalSumAddPool * 100 / totalSum),\r\n                percentOutputDfxFarmingPool: this.roundNum(totalSumFromPool * 100 / totalSum),\r\n                totalSumFarming: totalSum\r\n            })\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    updateDataDfxStaking = async () => {\r\n        const url = 'https://api.bscscan.com/api?module=account&action=tokentx&address=0x11340dC94E32310FA07CF9ae4cd8924c3cD483fe&startblock=0&endblock=25000000&sort=asc&apikey='\r\n        try {\r\n            const response = await fetch(url, {method: 'GET'})\r\n            let {result} = await response.json()\r\n            //const numberSeconds = 86400 //количество секунд в сутках, для фильтрации данных за сутки\r\n            const dfxStakingHash = \"0x11340dc94e32310fa07cf9ae4cd8924c3cd483fe\"\r\n            const startPoint = result[result.length - 1].timeStamp - numberSeconds\r\n            const transactionsPerDay = result.filter(({timeStamp}) => timeStamp > startPoint)\r\n            const inputStaking = transactionsPerDay.filter(({to}) => to === dfxStakingHash) //вход в staking\r\n            const outputStaking = transactionsPerDay.filter(({from}) => from === dfxStakingHash) //выход из staking\r\n            const totalSumAddStaking = this.roundNum(inputStaking.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) //сумма поступления в staking\r\n            const totalSumFromStaking = this.roundNum(outputStaking.reduce((acc, el) => acc + el.value / (10 ** 18), 0)) // сумма выхода из staking\r\n            const totalSum = totalSumAddStaking + totalSumFromStaking\r\n            this.setState({\r\n                inputDfxStaking: totalSumAddStaking, \r\n                outputDfxStaking: totalSumFromStaking, \r\n                percentInputDfxStaking: this.roundNum(totalSumAddStaking * 100 / totalSum),\r\n                percentOutputDfxStaking: this.roundNum(totalSumFromStaking * 100 / totalSum),\r\n                totalSumStaking: totalSum\r\n            })\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    getDataAnalysis = () => {\r\n        this.updateDataFarmingPool()\r\n        this.updateExchangerData()\r\n        this.updateDataDfxStaking()\r\n    }\r\n\r\n    startAnalysis = () => {\r\n        this.timerId = setInterval(this.getDataAnalysis, 30000)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDataAnalysis()\r\n        this.startAnalysis()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerId);\r\n      }\r\n\r\n    render() {\r\n        const {\r\n            percentInputDfxPancakeSwap, \r\n            percentOutputDfxPancakeSwap, \r\n            inputDfxPancakeSwap, \r\n            outputDfxPancakeSwap,\r\n            percentInputDfxFarmingPool,\r\n            percentOutputDfxFarmingPool,\r\n            inputDfxFarmingPool,\r\n            outputDfxFarmingPool,\r\n            percentInputDfxStaking, \r\n            percentOutputDfxStaking, \r\n            inputDfxStaking, \r\n            outputDfxStaking,\r\n            totalSumPancake,\r\n            totalSumFarming,\r\n            totalSumStaking\r\n\r\n        } = this.state\r\n\r\n        const getPercent = (val) => this.roundNum(val * 100 / (totalSumPancake + totalSumFarming + totalSumStaking))\r\n        let percentPancake = getPercent(totalSumPancake)\r\n        let percentFarming = getPercent(totalSumFarming)\r\n        let percentStaking = getPercent(totalSumStaking) \r\n    return (\r\n        <>\r\n        <Alert variant={'dark'}>Все суммы указаны в DFX.</Alert>\r\n        <div>\r\n          <p><strong>Информация по обмену токена DFX</strong></p>\r\n          BUSD-DFX сумма - <Badge variant=\"success\">{inputDfxPancakeSwap}</Badge>\r\n          <ProgressBar variant=\"success\" now={percentInputDfxPancakeSwap} label={`${percentInputDfxPancakeSwap}%`} />\r\n          DFX-BUSD сумма - <Badge variant=\"danger\">{outputDfxPancakeSwap}</Badge>\r\n          <ProgressBar variant=\"danger\" now={percentOutputDfxPancakeSwap} label={`${percentOutputDfxPancakeSwap}%`} />\r\n        </div>\r\n        <Alert variant={'dark'}></Alert>\r\n        <Alert variant={'dark'}></Alert>\r\n        <div>\r\n          <p><strong>Информация по обороту на Dfx-FarmingPool</strong></p>\r\n          поступление на Dfx-FarmingPool сумма - <Badge variant=\"success\">{inputDfxFarmingPool}</Badge>\r\n          <ProgressBar variant=\"success\" now={percentInputDfxFarmingPool} label={`${percentInputDfxFarmingPool}%`} />\r\n          выход из Dfx-FarmingPool сумма - <Badge variant=\"danger\">{outputDfxFarmingPool}</Badge>\r\n          <ProgressBar variant=\"danger\" now={percentOutputDfxFarmingPool} label={`${percentOutputDfxFarmingPool}%`} />\r\n      </div>\r\n      <Alert variant={'dark'}></Alert>\r\n      <Alert variant={'dark'}></Alert>\r\n      <div>\r\n          <p><strong>Информация по обороту на Dfx-Staking</strong></p>\r\n          поступление на Dfx-Staking сумма - <Badge variant=\"success\">{inputDfxStaking}</Badge>\r\n          <ProgressBar variant=\"success\" now={percentInputDfxStaking} label={`${percentInputDfxStaking}%`} />\r\n          выход из Dfx-Staking сумма - <Badge variant=\"danger\">{outputDfxStaking}</Badge>\r\n          <ProgressBar variant=\"danger\" now={percentOutputDfxStaking} label={`${percentOutputDfxStaking}%`} />\r\n      </div>\r\n      <Alert variant={'dark'}></Alert>\r\n      <Alert variant={'dark'}></Alert>\r\n      <div>\r\n          <p><strong>Информация по общему обороту</strong></p>\r\n          оборот на PancakeSwap - <Badge variant=\"dark\">{totalSumPancake}</Badge>\r\n          <ProgressBar striped variant=\"success\" now={percentPancake} label={`${percentPancake}%`} />\r\n          оборот на Farming - <Badge variant=\"dark\">{totalSumFarming}</Badge>\r\n          <ProgressBar striped variant=\"info\" now={percentFarming} label={`${percentFarming}%`} />\r\n          оборот на Dfx-Staking - <Badge variant=\"dark\">{totalSumStaking}</Badge>\r\n          <ProgressBar striped variant=\"warning\" now={percentStaking} label={`${percentStaking}%`} />\r\n      </div>\r\n      <Alert variant={'dark'}></Alert>\r\n      <Alert variant={'dark'}></Alert>\r\n      </>\r\n    )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Jumbotron, Container} from 'react-bootstrap';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <Jumbotron fluid>\r\n          <Container>\r\n            <h1>dfx token analysis</h1>\r\n          </Container>\r\n        </Jumbotron>\r\n    )\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { Analysis } from './Components/Analysis';\nimport { Header } from './Components/Header';\n\n\n\nfunction App() {\n  return (\n    <>\n    <Header />\n    <Analysis />\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}